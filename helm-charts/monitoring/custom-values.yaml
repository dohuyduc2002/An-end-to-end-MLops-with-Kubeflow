additionalPrometheusRules:
  - name: underwrite-rule-file
    groups:
      - name: System alerts
        rules:
          - alert: NodeOutOfMemory
            expr: node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes * 100 < 5
            for: 1m
            labels:
              severity: warning
            annotations:
              summary: Node out of memory
              description: Node memory has reached {{ humanize $value }}%
      - name: underwriting_alerts
        rules:
          - alert: DataDriftWarning
            expr: app_data_drift_score > 0.1
            for: 1m
            labels:
              severity: warning
            annotations:
              summary: "⚠️ Data drift warning: {{ $value }}"
          - alert: DataDriftCritical
            expr: app_data_drift_score > 0.3
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: "🚨 Data drift critical: {{ $value }}"
          - alert: PredictionEntropyTooHigh
            expr: api_prediction_entropy > 0.7
            for: 1m
            labels:
              severity: warning
            annotations:
              summary: "⚠️ Prediction entropy too high: {{$value}}"
          - alert: PredictionEntropyCritical
            expr: api_prediction_entropy > 0.9
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: "🚨 Prediction entropy CRITICAL: {{$value}}"
          - alert: ConfidenceTooLow
            expr: api_avg_confidence < 0.9
            for: 1m
            labels:
              severity: warning
            annotations:
              summary: "⚠️ Model confidence low: {{$value}}"
          - alert: ConfidenceCritical
            expr: api_avg_confidence < 0.7
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: "🚨 Model confidence CRITICAL: {{$value}}"


alertmanager:
  config:
    global:
      resolve_timeout: 5m
    route:
      group_by: ['alertname', 'job']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 3h
      receiver: 'null'
      routes:
        - receiver: discord
          matchers:
            - severity = "critical"
        - receiver: discord
          matchers:
            - alertname =~ "NodeOutOfMemory"
    receivers:
      - name: discord
        discord_configs:
          - webhook_url: https://discord.com/api/webhooks/1370074172977315851/S_-sXHEiNcIIaNCiROHmENd30wnMLHPMtAz3u8kYvUA2umNap2Vg6kotWNDmKT1euLv-
  ingress:
    enabled: true

    # For Kubernetes >= 1.18 you should specify the ingress-controller via the field ingressClassName
    # See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#specifying-the-class-of-an-ingress
    ingressClassName: nginx

    annotations:
      kubernetes.io/ingress.class: "nginx"

    labels: {}

    ## Override ingress to a different defined port on the service
    # servicePort: 8081
    ## Override ingress to a different service then the default, this is useful if you need to
    ## point to a specific instance of the alertmanager (eg kube-prometheus-stack-alertmanager-0)
    # serviceName: kube-prometheus-stack-alertmanager-0

    ## Hosts must be provided if Ingress is enabled.
    ##
    hosts:
      - alertmanager.ducdh.com

    ## Paths to use for ingress rules - one path should match the alertmanagerSpec.routePrefix
    ##
    paths:
      - /

grafana:
  ingress:
    ## If true, Grafana Ingress will be created
    ##
    enabled: true

    ## IngressClassName for Grafana Ingress.
    ## Should be provided if Ingress is enable.
    ##
    ingressClassName: nginx

    ## Annotations for Grafana Ingress
    ##
    annotations:
      kubernetes.io/ingress.class: "nginx"
      # kubernetes.io/tls-acme: "true"

    ## Labels to be added to the Ingress
    ##
    labels: {}

    ## Hostnames.
    ## Must be provided if Ingress is enable.
    ##
    hosts:
      - grafana.ducdh.com
    # hosts: []

    ## Path for grafana ingress
    path: /

prometheus:
  ingress:
    enabled: true

    # For Kubernetes >= 1.18 you should specify the ingress-controller via the field ingressClassName
    # See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#specifying-the-class-of-an-ingress
    ingressClassName: nginx

    annotations:
      kubernetes.io/ingress.class: "nginx"
    labels: {}

    ## Redirect ingress to an additional defined port on the service
    # servicePort: 8081

    ## Hostnames.
    ## Must be provided if Ingress is enabled.
    ##
    hosts:
      - prometheus.ducdh.com
    # hosts: []

    ## Paths to use for ingress rules - one path should match the prometheusSpec.routePrefix
    ##
    paths:
      - /
